#5.1
n = int(input("Majade arv: "))

roof = " ~~~~~"
walls = " /_____\\"
windows = " | []  |"
base = "   -----"

for i in range(n):
    print(roof, end=" ")
    print(walls, end=" ")
    print(windows, end=" ")
    print(base)

#5.2
import sqlite3

conn = sqlite3.connect(':memory:')
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE students_grades (
    student_id INT,
    class_id INT,
    grade INT
)
""")

cursor.executemany("""
INSERT INTO students_grades (student_id, class_id, grade) 
VALUES (?, ?, ?)
""", [
    (1, 1, 5), (2, 1, 4), (3, 1, 3), (4, 1, 5),
    (5, 1, 4), (6, 2, 4), (7, 2, 5), (8, 2, 3),
    (9, 2, 4), (10, 2, 5)
])

cursor.execute("SELECT * FROM students_grades")
for row in cursor.fetchall():
    print(row)

cursor.execute("""
SELECT class_id, AVG(grade) AS average_grade
FROM students_grades
GROUP BY class_id
""")
for row in cursor.fetchall():
    print(row)

conn.close()

#5.3
grades = [
    (1, 5), (2, 4), (3, 3), (4, 5), (5, 2),
    (6, 4), (7, 5), (8, 3), (9, 4), (10, 2)
]

min_grade = max_grade = grades[0][1]
for student_id, grade in grades:
    if grade < min_grade:
        min_grade = grade
    if grade > max_grade:
        max_grade = grade

print(f"Min grade: {min_grade}, Max grade: {max_grade}")

#5.4
districts = [
    (1, 200, 150), (2, 150, 120), (3, 250, 180), (4, 300, 140),
    (5, 180, 160), (6, 220, 100), (7, 100, 110), (8, 300, 130),
    (9, 400, 170), (10, 500, 190), (11, 270, 140), (12, 160, 160)
]

total_population = sum(population for _, population, _ in districts)
total_area = sum(area for _, _, area in districts)

average_density = total_population / total_area
print(f"Average density: {average_density}")

#5.5
x_values = [1, 1.5, 2, 2.5, 3]

for x in x_values:
    y = -0.5 * x + x
    print(f"x: {x}, y: {y}")
